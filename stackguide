#!/usr/bin/env bash

# StackGuide - Local-first AI Knowledge Assistant
# Main entry point script for easy command execution

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory - find the project root by looking for docker-compose.dev.yml
find_project_root() {
    local current_dir="$(pwd)"
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # First, try to find docker-compose.dev.yml in current directory
    if [ -f "docker-compose.dev.yml" ]; then
        echo "$current_dir"
        return 0
    fi
    
    # Then try to find it in parent directories from current location
    local dir="$current_dir"
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/docker-compose.dev.yml" ]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    
    # Finally, try to find it from the script's location
    dir="$script_dir"
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/docker-compose.dev.yml" ]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    
    # If we still can't find it, use current directory and show warning
    echo -e "${YELLOW}‚ö†Ô∏è  Could not find docker-compose.dev.yml in parent directories${NC}" >&2
    echo -e "${YELLOW}‚ö†Ô∏è  Make sure you're running this from the StackGuide project directory${NC}" >&2
    echo "$current_dir"
}

# Get the project root directory
SCRIPT_DIR="$(find_project_root)"

# Function to show help
show_help() {
    echo -e "${BLUE}üöÄ StackGuide - Local-first AI Knowledge Assistant${NC}"
    echo ""
    echo -e "${GREEN}Available Commands:${NC}"
    echo "  start           - Start development environment and open CLI"
    echo "  start-gpu       - Start development environment with GPU support"
    echo "  docker-build    - Build containers without starting them"
    echo "  docker-build-gpu- Build containers with GPU support (no start)"
    echo "  cli             - Open interactive CLI"
    echo "  ingest          - Ingest data from local sources"
    echo "  ingest-url      - Ingest specific URLs (Confluence, Notion, GitHub)"
    echo "  query <text>    - Run a specific query"
    echo "  status          - Show system status and health"
    echo "  logs            - View all service logs"
    echo "  stop            - Stop all services"
    echo "  restart         - Restart all services"
    echo "  clean           - Clean up containers and images"
    echo "  help            - Show this help message"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  stackguide start"
    echo "  stackguide docker-build"
    echo "  stackguide ingest-url"
    echo "  stackguide query 'How do I set up the database?'"
    echo "  stackguide status"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker is not running. Please start Docker and try again.${NC}"
        exit 1
    fi
}

# Function to check if services are running
check_services() {
    if ! docker compose ps | grep -q "Up"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Services are not running. Starting them...${NC}"
        return 1
    fi
    return 0
}

# Function to build containers
build_containers() {
    echo -e "${BLUE}üîß Building StackGuide containers...${NC}"
    cd "$SCRIPT_DIR"
    docker compose -f docker-compose.dev.yml build
    echo -e "${GREEN}‚úÖ Containers built successfully!${NC}"
    echo -e "${BLUE}üí° Use 'stackguide start' to start the services${NC}"
}

# Function to build containers with GPU support
build_containers_gpu() {
    echo -e "${BLUE}üîß Building StackGuide containers with GPU support...${NC}"
    cd "$SCRIPT_DIR"
    docker compose -f docker-compose.dev.yml --profile gpu build
    echo -e "${GREEN}‚úÖ GPU containers built successfully!${NC}"
    echo -e "${BLUE}üí° Use 'stackguide start-gpu' to start the services${NC}"
}

# Function to start services
start_services() {
    echo -e "${BLUE}üöÄ Starting StackGuide services...${NC}"
    cd "$SCRIPT_DIR"
    
    # Check if containers exist, build if needed
    if ! docker compose -f docker-compose.dev.yml ps --services --filter "status=running" | grep -q .; then
        echo -e "${YELLOW}‚ö†Ô∏è  No running containers found. Checking if containers exist...${NC}"
        if ! docker compose -f docker-compose.dev.yml ps --services | grep -q .; then
            echo -e "${YELLOW}‚ö†Ô∏è  No containers found. Building them first...${NC}"
            if [ "$1" = "gpu" ]; then
                build_containers_gpu
            else
                build_containers
            fi
        fi
    fi
    
    if [ "$1" = "gpu" ]; then
        echo -e "${BLUE}üîß Using GPU profile...${NC}"
        docker compose -f docker-compose.dev.yml --profile gpu up -d
    else
        echo -e "${BLUE}üîß Using CPU profile...${NC}"
        docker compose -f docker-compose.dev.yml --profile cpu up -d
    fi
    
    echo -e "${YELLOW}‚è≥ Waiting for services to be ready...${NC}"
    sleep 15
    
    if check_services; then
        echo -e "${GREEN}‚úÖ Services are running!${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Failed to start services. Check logs with 'stackguide logs'${NC}"
        return 1
    fi
}

# Function to open CLI
open_cli() {
    echo -e "${BLUE}üíª Opening StackGuide CLI...${NC}"
    cd "$SCRIPT_DIR"
    docker compose exec api python -m cli.main
}

# Function to run a query
run_query() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Please provide a query. Usage: stackguide query 'your question here'${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üîç Running query: $1${NC}"
    cd "$SCRIPT_DIR"
    
    # Check if services are running, start if needed
    if ! check_services; then
        start_services
    fi
    
    # Run the query
    docker compose exec api python -c "
from core.knowledge import KnowledgeEngine
engine = KnowledgeEngine()
response = engine.query('$1')
print('\\nüìö Answer:')
print(response.answer)
print(f'\\nüéØ Confidence: {response.confidence:.2f}')
if response.sources:
    print('\\nüìñ Sources:')
    for i, source in enumerate(response.sources[:3], 1):
        print(f'{i}. {source.source} (Relevance: {source.score:.2f})')
"
}

# Function to show status
show_status() {
    echo -e "${BLUE}üìä StackGuide Status${NC}"
    echo "=================="
    cd "$SCRIPT_DIR"
    
    # Check if services are running
    if check_services; then
        echo -e "${GREEN}‚úÖ Services are running${NC}"
        echo ""
        echo -e "${BLUE}üìã Service Details:${NC}"
        docker compose ps
        echo ""
        echo -e "${BLUE}üîç Health Check:${NC}"
        docker compose exec api python -c "
from cli.main import run_status
run_status()
"
    else
        echo -e "${RED}‚ùå Services are not running${NC}"
        echo "Use 'stackguide start' to start the services"
    fi
}

# Function to show logs
show_logs() {
    echo -e "${BLUE}üìã StackGuide Logs${NC}"
    cd "$SCRIPT_DIR"
    docker compose logs -f
}

# Function to stop services
stop_services() {
    echo -e "${YELLOW}üõë Stopping StackGuide services...${NC}"
    cd "$SCRIPT_DIR"
    docker compose down
    echo -e "${GREEN}‚úÖ Services stopped${NC}"
}

# Function to restart services
restart_services() {
    echo -e "${YELLOW}üîÑ Restarting StackGuide services...${NC}"
    clean_up
    sleep 2
    start_services
}

# Function to clean up
clean_up() {
    echo -e "${YELLOW}üßπ Cleaning up StackGuide...${NC}"
    cd "$SCRIPT_DIR"
    docker compose down -v --remove-orphans
    docker system prune -f
    echo -e "${GREEN}‚úÖ Cleanup complete${NC}"
}

# Main script logic
main() {
    # Check if Docker is running
    check_docker
    
    case "${1:-help}" in
        "start")
            start_services
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}üéâ StackGuide is ready!${NC}"
                echo -e "${BLUE}üí° Use 'stackguide cli' to open the interactive CLI${NC}"
            fi
            ;;
        "start-gpu")
            start_services "gpu"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}üéâ StackGuide is ready with GPU support!${NC}"
                echo -e "${BLUE}üí° Use 'stackguide cli' to open the interactive CLI${NC}"
            fi
            ;;
        "docker-build")
            build_containers
            ;;
        "docker-build-gpu")
            build_containers_gpu
            ;;
        "cli")
            if ! check_services; then
                echo -e "${YELLOW}‚ö†Ô∏è  Starting services first...${NC}"
                start_services
            fi
            open_cli
            ;;
        "ingest")
            if ! check_services; then
                echo -e "${YELLOW}‚ö†Ô∏è  Starting services first...${NC}"
                start_services
            fi
            echo -e "${BLUE}üìö Starting data ingestion...${NC}"
            cd "$SCRIPT_DIR"
            docker compose exec api python -c "
from cli.main import run_ingestion
run_ingestion()
"
            ;;
        "ingest-url")
            if ! check_services; then
                echo -e "${YELLOW}‚ö†Ô∏è  Starting services first...${NC}"
                start_services
            fi
            open_cli
            ;;
        "query")
            shift
            run_query "$*"
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "clean")
            clean_up
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
